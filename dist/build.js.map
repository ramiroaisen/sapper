{"version":3,"file":"build.js","sources":["../src/api/build.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport minify_html from './utils/minify_html';\nimport { create_compilers, create_app, create_manifest_data, create_serviceworker_manifest } from '../core';\nimport { copy_shimport } from './utils/copy_shimport';\nimport read_template from '../core/read_template';\nimport { CompileResult } from '../core/create_compilers/interfaces';\nimport { noop } from './utils/noop';\nimport validate_bundler from './utils/validate_bundler';\nimport { copy_runtime } from './utils/copy_runtime';\nimport { rimraf, mkdirp } from './utils/fs_utils';\nconst precinct = require(\"precinct\");\n\ntype Opts = {\n\tcwd?: string;\n\tsrc?: string;\n\troutes?: string;\n\tdest?: string;\n\toutput?: string;\n\tstatic?: string;\n\tlegacy?: boolean;\n\tbundler?: 'rollup' | 'webpack';\n\text?: string;\n\toncompile?: ({ type, result }: { type: string, result: CompileResult }) => void;\n};\n\nexport async function build({\n\tcwd,\n\tsrc = 'src',\n\troutes = 'src/routes',\n\toutput = 'src/node_modules/@sapper',\n\tstatic: static_files = 'static',\n\tdest = '__sapper__/build',\n\n\tbundler,\n\tlegacy = false,\n\text,\n\toncompile = noop\n}: Opts = {}) {\n\tbundler = validate_bundler(bundler);\n\n\tcwd = path.resolve(cwd);\n\tsrc = path.resolve(cwd, src);\n\tdest = path.resolve(cwd, dest);\n\troutes = path.resolve(cwd, routes);\n\toutput = path.resolve(cwd, output);\n\tstatic_files = path.resolve(cwd, static_files);\n\n\tif (legacy && bundler === 'webpack') {\n\t\tthrow new Error(`Legacy builds are not supported for projects using webpack`);\n\t}\n\n\trimraf(output);\n\tmkdirp(output);\n\tcopy_runtime(output);\n\n\trimraf(dest);\n\tmkdirp(`${dest}/client`);\n\tcopy_shimport(dest);\n\n\t// minify src/template.html\n\t// TODO compile this to a function? could be quicker than str.replace(...).replace(...).replace(...)\n\tconst template = read_template(src);\n\n\t// remove this in a future version\n\tif (template.indexOf('%sapper.base%') === -1) {\n\t\tconst error = new Error(`As of Sapper v0.10, your template.html file must include %sapper.base% in the <head>`);\n\t\terror.code = `missing-sapper-base`;\n\t\tthrow error;\n\t}\n\n\tfs.writeFileSync(`${dest}/template.html`, minify_html(template));\n\n\tconst manifest_data = create_manifest_data(routes, ext);\n\n\t// create src/node_modules/@sapper/app.mjs and server.mjs\n\tcreate_app({\n\t\tbundler,\n\t\tmanifest_data,\n\t\tcwd,\n\t\tsrc,\n\t\tdest,\n\t\troutes,\n\t\toutput,\n\t\tdev: false\n\t});\n\n\tconst { client, server, serviceworker } = await create_compilers(bundler, cwd, src, dest, false);\n\n\tconst client_result = await client.compile();\n\toncompile({\n\t\ttype: 'client',\n\t\tresult: client_result\n\t});\n\n\tconst build_info = client_result.to_json(manifest_data, { src, routes, dest });\n\tconst {pages} = manifest_data;\n\n\tif (legacy) {\n\t\tprocess.env.SAPPER_LEGACY_BUILD = 'true';\n\t\tconst { client } = await create_compilers(bundler, cwd, src, dest, false);\n\n\t\tconst client_result = await client.compile();\n\n\t\toncompile({\n\t\t\ttype: 'client (legacy)',\n\t\t\tresult: client_result\n\t\t});\n\n\t\tclient_result.to_json(manifest_data, { src, routes, dest });\n\t\tbuild_info.legacy_assets = client_result.assets;\n\t\tdelete process.env.SAPPER_LEGACY_BUILD;\n\t}\n\t\n\t// START Add JS assets\n\tconst clientDir = path.join(dest, \"client\");\n\tconst main = build_info.assets.main;\n\n\t// TODO: Remove this\n\tconst appFile = fs.readdirSync(clientDir).find(filename => {\n\t\treturn filename.endsWith(\".js\") && filename.startsWith(\"app.\");\n\t})\n\n\tconst app = fs.readFileSync(path.join(clientDir, appFile ? appFile : main), \"utf8\");\n\n\tconst makeDependencyList = (filename: string): string[] => {\n\t\tconst deps: string[] = [];\n\n\t\tconst add = (filename: string) => {\n\t\t\tif(deps.includes(filename))\n\t\t\t\treturn;\n\t\t\t\n\t\t\tdeps.push(filename);\n\t\t\tconst source = fs.readFileSync(`${clientDir}/${filename}`, \"utf8\");\n\t\t\tconst files: string[] = precinct(source, {type: \"es6\", es6: {mixedImports: false}});\n\t\t\tfiles\n\t\t\t\t.map(file => path.basename(file))\n\t\t\t\t.filter(file => {\n\t\t\t\t\treturn !file.startsWith(\"sapper-dev-client\")\n\t\t\t\t\t\t\t\t&& file !== main\n\t\t\t\t\t\t\t\t&& file !== appFile\n\t\t\t\t}).forEach(add)\n\t\t}\n\n\t\tadd(filename);\n\t\treturn deps;\n\t}\n\n\tconst mainDeps = [main];\n\n\tconst files = [];\n\tconst reg = /import\\([\"']\\.\\/(.+?)[\"']\\)/g\n\tlet match;\n\twhile(match = reg.exec(app)){\n\t\tif(!match[1].startsWith(\"sapper-dev-client\"))\n\t\tfiles.push(match[1]);\n\t}\n\n\tconst js_deps: Record<string, string[]> = {};\n\tObject.keys(build_info.css.chunks).forEach((key, i) => {\n\t\tjs_deps[key] = makeDependencyList(files[i]);\n\t});\n\t// END Add JS assets\n\n\t(build_info as any).js = js_deps;\n\t\n\t// ADD: Preety print\n\tfs.writeFileSync(path.join(dest, 'build.json'), JSON.stringify(build_info, null, 2));\n\n\tconst server_stats = await server.compile();\n\toncompile({\n\t\ttype: 'server',\n\t\tresult: server_stats\n\t});\n\n\tlet serviceworker_stats;\n\n\tif (serviceworker) {\n\n\t\tconst client_files = client_result.chunks\n\t\t\t.filter(chunk => !chunk.file.endsWith('.map')) // SW does not need to cache sourcemap files\n\t\t\t.map(chunk => `client/${chunk.file}`);\n\n\t\tcreate_serviceworker_manifest({\n\t\t\tmanifest_data,\n\t\t\toutput,\n\t\t\tclient_files,\n\t\t\tstatic_files\n\t\t});\n\n\t\tserviceworker_stats = await serviceworker.compile();\n\n\t\toncompile({\n\t\t\ttype: 'serviceworker',\n\t\t\tresult: serviceworker_stats\n\t\t});\n\t}\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsEA,AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}